{"version":3,"sources":["../../src/services/user.service.js"],"names":["bcrypt","jwt","User","config","login","email","password","user","findOne","where","compare","hash","token","sign","sub","id","secret","expiresIn","status","getAll","findAll","getById","getUser","create","params","username","update","usernameChanged","Object","assign","save","omitHash","get","_delete","destroy","findByPk","userWithoutHash"],"mappings":"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","file":"user.service.js","sourcesContent":["// const config = require('config.json');\r\n// const jwt = require('jsonwebtoken');\r\n// const bcrypt = require('bcryptjs');\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport User from '../models/user.model.js';\r\nimport config from '../configs/config.js';\r\n\r\n\r\n// authentificate : login\r\nexport async function login({ email, password }) {\r\n  const user = await User.findOne({ where: { email } });\r\n  if (!user || !(await bcrypt.compare(password, user.hash)))\r\n    throw 'Username or password is incorrect';\r\n  // authentication successful\r\n  const token = jwt.sign({ sub: user.id }, config.secret, { expiresIn: '7d' });\r\n  //  return { ...omitHash(user.get()), token };\r\n  return {\r\n    status: 200,\r\n    email: email,\r\n    token: token\r\n  };\r\n}\r\n\r\n// getAll\r\n// *******************\r\nexport async function getAll() {\r\n  return await User.findAll();\r\n}\r\n\r\n// getByID\r\n// *******************\r\nexport async function getById(id) {\r\n  return await getUser(id);\r\n}\r\n\r\n// create\r\n// *******************\r\nexport async function create(params) {\r\n  // validate\r\n  if (await User.findOne({ where: { email: params.email } })) {\r\n    throw 'Username \"' + params.username + '\" is already taken';\r\n  }\r\n  // hash password\r\n  if (params.password) {\r\n    params.hash = await bcrypt.hash(params.password, 10);\r\n  }\r\n  // save user\r\n  await User.create(params);\r\n}\r\n\r\n\r\n// update \r\n// *******************\r\nexport async function update(id, params) {\r\n  const user = await getUser(id);\r\n  // validate\r\n  const usernameChanged = params.username && user.username !== params.username;\r\n  if (usernameChanged && await User.findOne({ where: { username: params.username } })) {\r\n    throw 'Username \"' + params.username + '\" is already taken';\r\n  }\r\n  // hash password if it was entered\r\n  if (params.password) {\r\n    params.hash = await bcrypt.hash(params.password, 10);\r\n  }\r\n  // copy params to user and save\r\n  Object.assign(user, params);\r\n  await user.save();\r\n  return omitHash(user.get());\r\n}\r\n\r\n// delete\r\n// *******************\r\nexport async function _delete(id) {\r\n  const user = await getUser(id);\r\n  await user.destroy();\r\n}\r\n\r\n// helper functions\r\nasync function getUser(id) {\r\n  const user = await User.findByPk(id);\r\n  if (!user) throw 'User not found';\r\n  return user;\r\n}\r\n\r\nfunction omitHash(user) {\r\n  const { userWithoutHash } = user;\r\n  return userWithoutHash;\r\n}\r\n\r\nexport default {}\r\n"]}